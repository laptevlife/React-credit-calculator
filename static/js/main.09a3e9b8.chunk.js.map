{"version":3,"sources":["components/InputData/Select/Select.jsx","components/InputData/InputData.js","components/OutputData/OutputData.js","App.js","serviceWorker.js","index.js"],"names":["Select","options","map","e","value","label","i","key","onChange","this","props","selectperiod","React","Component","InputData","inputSum","sum","Number","target","updatedata","creditSum","inputFirstPay","firstpay","firstPay","selectPeriod","period","parseInt","months","inputPersent","persents","parseFloat","comparison","console","log","inputdata","prettify","className","type","min","max","step","OutputData","data","totalSum","monthPayment","overPayment","App","state","inputData","outputData","updateData","val","newData","res","calculation","setState","newdata","y","Math","pow","creditSumWithoFirstPay","monthlyPayment","round","totalPayment","num","toString","replace","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09a3e9b8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default class Select extends React.Component {\r\n    \r\n    render() {\r\n     \r\n        const monthesArr = [6, 12, 18, 24, 30, 36, 42, 48,54,60];\r\n        const optionsArr = monthesArr.map( e =>{\r\n            return(\r\n                { value:e, label:e}\r\n            )\r\n        })\r\n        const options = optionsArr.map( i => <option key = {i.label} value = {i.value}>{i.label} </option> )\r\n        // console.log(options)\r\n        return (\r\n            <div>\r\n                <select onChange= {this.props.selectperiod} >\r\n                   {options}\r\n                </select>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Select from './Select/Select';\r\n\r\n\r\nexport default class InputData extends React.Component {\r\n\r\n    \r\n\r\n    //функции получают данные из инпутов и передают полученные значения в updatedata\r\n    inputSum = (e)=> {\r\n        let sum = Number(e.target.value) ;\r\n        this.props.updatedata({creditSum : sum})\r\n        // console.log(sum)\r\n    }\r\n \r\n    inputFirstPay = (e)=>{\r\n        let firstpay = Number(e.target.value);\r\n        // console.log('firstpay', typeof(firstpay))\r\n        this.props.updatedata({firstPay : firstpay})\r\n    }\r\n    selectPeriod = (e) => {\r\n        let period = parseInt(e.target.value, 10) ;\r\n        this.props.updatedata({months : period})\r\n    }\r\n    inputPersent = (e) => {\r\n        let persents = parseFloat(e.target.value, 10) ;\r\n        this.props.updatedata({persents : persents})\r\n\r\n    }\r\n    comparison = (creditSum, firstPay)=>{\r\n        if(creditSum<firstPay){\r\n            console.log('error < 0')\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        // debugger;\r\n    let {creditSum, firstPay, persents } = this.props.inputdata;\r\n    let {prettify} = this.props;\r\n    this.comparison(creditSum, firstPay);\r\n  \r\n\r\n        return (\r\n            <div>\r\n                <div className=\"cardd \">\r\n                    <div className=\"center\">\r\n                        <div className=\"line\">\r\n                            <div className=\"headline\">Стоимость: {prettify(creditSum)} ₽</div>\r\n                            <input className='input' type=\"range\" min=\"100000\" max='1000000' step='1000'  value = {creditSum}  onChange={this.inputSum} />\r\n                        </div>\r\n\r\n                        <div className=\"line\">\r\n                            <div className=\"headline\">Первоначальный взнос: {prettify(firstPay)} ₽</div>\r\n                            <input className='input' type=\"range\" min=\"0\" max='1000000' step='1000' /* value = {this.props.inputdata.creditSum} */ onChange={this.inputFirstPay} />\r\n                        </div>\r\n\r\n                        <div className=\"line\">\r\n                            <div className=\"headline\">Срок кредита (месяцы):</div>\r\n                         \r\n                         \r\n                            <Select selectperiod={this.selectPeriod} />\r\n\r\n                        </div>\r\n                        <div className=\"line\">\r\n                            <div className=\"headline\">Процентная ставка: {persents}%</div>\r\n                            <input className='input' type=\"range\" min='5' max='30' step=\"0.1\" value = {this.props.inputdata.persents} onChange={this.inputPersent} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default class OutputData extends React.Component {\r\n    render() {\r\n       let {totalSum, monthPayment, overPayment} = this.props.data;\r\n       let {prettify} = this.props;\r\n        return (\r\n            <div>\r\n                <div className=\"cardd \">\r\n\r\n                    <div className=\"flex-out\">\r\n                    \r\n                        <div className=\"center out left\">\r\n                        <div className=\"line\">\r\n                                <div className=\"headline\">Сумма кредита:   </div>                                                                 \r\n                            </div>\r\n                            <div className=\"line\">\r\n                                <div className=\"headline hl-mt\">Общая сумма выплаты: <br></br> <span>(с учетом переплаты, без первоначального взноса)</span>  </div>                              \r\n                            </div>\r\n                            <div className=\"line\">\r\n                                <div className=\"headline\">Ежемесячная плата:   </div>                          \r\n                                                                       \r\n                            </div>\r\n                            <div className=\"line\">\r\n                                <div className=\"headline\">Общая переплата:</div>\r\n                              \r\n                               \r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"center right\">\r\n                            <div className=\"line\">\r\n                                <div className=\"headline\">{prettify(totalSum-overPayment) } ₽</div>\r\n                            </div>\r\n                            <div className=\"line\">\r\n                                <div className=\"headline\">{prettify(totalSum - 0) } ₽</div>\r\n                            </div>\r\n                            <div className=\"line\">\r\n                                <div className=\"headline\">{prettify(monthPayment - 0)} ₽</div>\r\n                            </div>\r\n                            <div className=\"line\">\r\n                                <div className=\"headline\">{prettify(overPayment - 0)} ₽</div>\r\n                            </div>\r\n                            \r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport InputData from './components/InputData/InputData';\nimport OutputData from './components/OutputData/OutputData';\nimport './App.css'\n\nexport default class App extends React.Component {\n\n\n\n\n  state = {\n    inputData: {\n      creditSum: 0,\n      firstPay: 0,\n      months: 6,\n      persents: 7.7,\n    },\n    outputData: {\n      totalSum: '',\n      monthPayment: '',\n      overPayment: '',\n    }\n\n  }\n\n  //Получает новые значения из инпутов и формирует новый обьект InputData \n  updateData = ( val ) => {\n    const { inputData } = this.state;\n    let newData = { ...inputData, ...val };\n    //заново сформированный обьект INputData передается функции calculation, которая возвращает обьект вычесленных значений в переменную res\n    let res = this.calculation( newData );\n    // console.log('res', res)\n\n    this.setState(() => {\n  \n      return {\n        inputData: newData,\n        outputData: res\n      }\n    })\n  }\n  // this.updateData(inputData);\n  \n\n  //Функция рассчета \n  calculation = (newdata) => {\n    const { creditSum, firstPay, months, persents } = newdata;\n   \n    // i - ежемесячная процентная ставка\n    // p = s * (i + i/(1+i)^n -1)\n    let i = persents / 100 / 12;\n    let x = Math.pow(i + 1, months) - 1;\n    let y = i / x + i;\n    let creditSumWithoFirstPay = creditSum - firstPay;\n    let monthlyPayment = Math.round(creditSumWithoFirstPay * y);   /* Ежемесячный платеж */\n    // console.log(monthlyPayment)\n    let totalPayment =  Math.round(monthlyPayment * months);  /* Общая сумма платежа */\n    // console.log(totalPayment)\n    let overPay =  Math.round(totalPayment - creditSumWithoFirstPay);\n    // let overPay = Math.round(totalPayment - creditSumWithoFirstPay) ;\n    // console.log(overPay)\n\n    return {\n      totalSum: totalPayment,\n      monthPayment: monthlyPayment,\n      overPayment: overPay\n    }\n  }\n  \n\n  prettify = (num)=> {\n      let n = num.toString();\n      // console.log( n.replace(/(\\d{1,3}(?=(?:\\d\\d\\d)+(?!\\d)))/g, \"$1\" + ' '))\n      return n.replace(/(\\d{1,3}(?=(?:\\d\\d\\d)+(?!\\d)))/g, \"$1\" + ' ');\n  }\n  \n\n\n\n  render() {\n\n    const { inputData , outputData } = this.state;\n    // console.log('state', this.state);\n    // this.calculation(inputData)\n    // this.updateData(inputData)\n// debugger;\n// console.log(this.prettify(35.6755));\n\n    return (\n      <div className=\"container grid card\">\n        <InputData updatedata={this.updateData} inputdata={inputData} prettify={this.prettify}  />\n        <OutputData data={outputData} prettify={this.prettify} />\n        {/* <button onClick= {()=>this.hendlOutput(totalPayment,monthlyPayment,overPay)} >calculate</button> */}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}